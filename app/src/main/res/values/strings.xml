<resources>
    <string name="app_name">Android Compose Guide</string>
    <string name="expand_button_content_description">See more or less information about a step</string>
    <string name="step_one_name">Step 1: Create an empty project</string>
    <string name="step_one_info">In Android Studio, click \"Empty Project\".</string>
    <string name="step_two_name">Step 2: Configure the project</string>
    <string name="step_two_info">Name your project and set the sdk version</string>
    <string name="step_three_name">Step 3: Remove \"Hello Android!\"</string>
    <string name="step_three_info">The project will come with a \'Greeting\' composable with a \"Hello $name!\" text composable inside, delete them or alter them into the composable you\'ll be using.</string>
    <string name="step_four_name">Step 4: Set up the Surface composable</string>
    <string name="step_four_info">Inside the onCreate method, create a Surface composable inside the App\'s theme lambda. Set its modifiers to fill the max size and the background colour as the theme\'s background colour. Inside the surface\'s trailing lambda, call a composable to build the app, which we will make in the next step.</string>
    <string name="step_five_name">Step 5: Set up the Scaffold composable</string>
    <string name="step_five_info">Create a composable to be the root composable for the app. Inside, create a scaffold composable, set its modifier to fill the max size. In the scaffold contents, call a function to be the root composable of the first screen and pass the content padding paramter (\'it\') to it.</string>
    <string name="step_six_name">Step 6: Generate a theme</string>
    <string name="step_six_info">Use the material theme builder to create a colour and font theme. Export it as an android compose package.</string>
    <string name="step_seven_name">Step 7: Add the colours</string>
    <string name="step_seven_info">Replace the colours file in the app\'s theme package with the new one generated by Material Theme Builder. Change the name of the package in the Color.kt file to the name of the app\'s theme package you just moved it to. Nothing else in this file needs changing but you can break the colours up into groups with comments and whitespace if you like.</string>
    <string name="step_eight_name">Step 8: Add the theme</string>
    <string name="step_eight_info">Replace the theme.kt file in the app\'s package with the new one. Change the package name, the theme\'s name, and turn the dynamic colour variable to false. The rest of the file should remain the same.</string>
    <string name="step_nine_name">Step 9: Add the fonts</string>
    <string name="step_nine_info">Replace the fonts file in the app\'s package with the new one. Android studio will prompt you to import the Google Fonts dependency, do so. You will also need to copy the \'font_certs.xml\' file into the \'res/values\' package to finish importing the fonts.</string>
    <string name="step_ten_name">Step 10: Add the strings</string>
    <string name="step_ten_info">Inside the Android Studio Resource Manager, add any strings you will be using in your project.</string>
    <string name="step_eleven_name">Step 11: Add the dimensions</string>
    <string name="step_eleven_info">It is good practise to use a dimens.xml file to store dimensions of things like image sizes or padding values, so you can change them all easily at a later date. Inside the \'res/values\' package, create (or copy in) a dimens.xml file and add any basic dimensions you might need. E.g. padding_small = 8.dp, padding_medium = 16.dp, icon_size = 24.dp, image_size = 64.dp</string>
    <string name="step_twelve_name">Step 12: Add the shapes</string>
    <string name="step_twelve_info">If your project is using any theme defined shapes, like applying a rounded border to an image or changing the shape of a card, create a Shapes.kt file inside the theme package. Add the shapes you need to in there and then add \'shapes = Shapes\' to the MaterialTheme class at the bottom of the theme file (where typography = Typography is).</string>
    <string name="step_thirteen_name">Step 13: Add the images</string>
    <string name="step_thirteen_info">Using Android Studio\'s resources manager, import any images you will be using in your project.</string>
    <string name="step_fourteen_name">Step 14: Create the app icon</string>
    <string name="step_fourteen_info">Using Android Studio\'s Image Asset maker, import a foreground and background image / colour to make the app\'s logo.</string>
    <string name="step_fifteen_name">Step 15: Add the model classes</string>
    <string name="step_fifteen_info">Create a new package in the app\'s src code directory. Create a class for any data objects you will need to model in your app.</string>
    <string name="step_sixteen_name">Step 16: Create a class list object</string>
    <string name="step_sixteen_info">Create an object file to store a list of all the populated class instances you will need. This will provide each instance with arguments from your input or imported strings and images (or similar).</string>
    <string name="step_seventeen_name">Step 17: Make the first screen</string>
    <string name="step_seventeen_info">Create a new .kt file to store the composables for the first screen. Inside, create the root composable function with the name that you are calling from within the Scaffold in the MainActivity.kt file.</string>
    <string name="step_eighteen_name">Step 18: Create a Top Bar</string>
    <string name="step_eighteen_info">Inside MainActivity.kt, create a new composable function to create the Top Bar. Call this function from within the parenthesis of the Scaffold (\"topBar = TopBar()\"). Inside this composable, create a CenterAlignedTopAppBar and inside put any text and images you wish.</string>
    <string name="step_nineteen_name">Step 19: Create previews</string>
    <string name="step_nineteen_info">Inside MainActivity.kt, set up your preview functions. One for the light theme, one for the dark theme.</string>
    <string name="step_twenty_name">Step 20: Make a UI item template</string>
    <string name="step_twenty_info">Create the UI item that you will later place in your screen. If you are going to have multiple of this item, make it repeatable by giving it paramters which it will take its data from.</string>
    <string name="step_twentyone_name">Step 21: Make the UI layout structure</string>
    <string name="step_twentyone_info">Create the structure to hold your UI pieces, e.g. a grid or a lazy column. Populate that structure with the items you just made.</string>
    <string name="step_twentytwo_name"><![CDATA[Step 22: Add modifiers & style]]></string>
    <string name="step_twentytwo_info">Use modifiers and styling to customise your items and improve their appearances.</string>
    <string name="step_twentythree_name">Step 23: Import the extended icon library</string>
    <string name="step_twentythree_info">Import the extended icon library to improve your app with icons. Copy this line into the \"build.gradle.kts :app\" file:\nimplementation(\"androidx.compose.material:material-icons-extended\")</string>
    <string name="step_twentyfour_name">Step 24: Add buttons</string>
    <string name="step_twentyfour_info">Store the state in a \"var .. by remember {mutableStateOf()}\", and use that state to determine what items are on screen with an if statement. Create a button composable like the one shown to change the state and trigger the recomposition.</string>
    <string name="step_twentyfive_name">Step 25: Add movement animations</string>
    <string name="step_twentyfive_info">Anywhere where you added movement to your app in the previous step, add a movement animation to smooth the movement out by using \".animateContentSize()\".</string>
    <string name="step_twentysix_name">Step 26: Add colour animations</string>
    <string name="step_twentysix_info">Optional. Add colour animations by creating a colour variable \"by animateColorAsState\" and assign it to the background of the UI item. For cards, apply it to the first child in the card, and make sure the padding for the card is on the grand child in the card, otherwise it will impact the colour.</string>
</resources>